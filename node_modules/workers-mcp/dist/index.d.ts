import { WorkerEntrypoint, DurableObject } from 'cloudflare:workers';
import * as hono_types from 'hono/types';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Hono } from 'hono';
import { cors } from 'hono/cors';

declare class ProxyToSelf<T extends {
    SHARED_SECRET: string;
}> {
    readonly worker: WorkerEntrypoint<T>;
    env: T;
    constructor(worker: WorkerEntrypoint<T>);
    fetch(request: Request): Promise<Response>;
}

declare abstract class DurableMCP<T extends Record<string, any> = Record<string, any>, Env = unknown> extends DurableObject<Env> {
    abstract server: McpServer;
    private transport;
    props: T;
    initRun: boolean;
    abstract init(): Promise<void>;
    _init(props: T): Promise<void>;
    onSSE(request: Request): Promise<Response>;
    onMessage(request: Request): Promise<Response>;
    static mount(path: string, { binding, corsOptions, }?: {
        binding?: string;
        corsOptions?: Parameters<typeof cors>[0];
    }): Hono<{
        Bindings: Record<string, DurableObjectNamespace<DurableMCP>>;
    }, hono_types.BlankSchema, "/">;
}

export { DurableMCP, ProxyToSelf };
