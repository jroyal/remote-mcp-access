import { DurableObject } from "cloudflare:workers";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { Connection } from "partyserver";

interface CORSOptions {
  origin?: string;
  methods?: string;
  headers?: string;
  maxAge?: number;
}
declare abstract class McpAgent<
  Env = unknown,
  State = unknown,
  Props extends Record<string, unknown> = Record<string, unknown>,
> extends DurableObject<Env> {
  #private;
  protected constructor(ctx: DurableObjectState, env: Env);
  /**
   * Agents API allowlist
   */
  initialState: State;
  get state(): State;
  sql<T = Record<string, string | number | boolean | null>>(
    strings: TemplateStringsArray,
    ...values: (string | number | boolean | null)[]
  ): T[];
  setState(state: State): void;
  onStateUpdate(state: State | undefined, source: Connection | "server"): void;
  /**
   * McpAgent API
   */
  abstract server: McpServer;
  private transport;
  props: Props;
  initRun: boolean;
  abstract init(): Promise<void>;
  _init(props: Props): Promise<void>;
  onSSE(path: string): Promise<Response>;
  onMCPMessage(request: Request): Promise<Response>;
  static mount(
    path: string,
    {
      binding,
      corsOptions,
    }?: {
      binding?: string;
      corsOptions?: CORSOptions;
    }
  ): {
    fetch: (
      request: Request,
      env: Record<string, DurableObjectNamespace<McpAgent>>,
      ctx: ExecutionContext
    ) => Promise<Response>;
  };
}

export { McpAgent };
